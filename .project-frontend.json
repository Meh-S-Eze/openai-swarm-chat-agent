{
    "userInstructions": "Execute the following terminal commands in order:",
    "terminalCommands": {
      "prerequisites": [
        "cd /Users/home/Documents/ainewagent",
        "source venv/bin/activate"  // Use existing venv from backend
      ],
      "setup": [
        "pip install panel param bokeh pytest-asyncio pytest-cov markdown jinja2",
        "mkdir -p frontend/components/chat frontend/components/utils frontend/styles frontend/tests/integration frontend/tests/utils"
      ],
      "environment": [
        "echo \"PANEL_THEME=material\" >> .env",
        "echo \"DEBUG_LEVEL=INFO\" >> .env"
      ],
      "run": [
        "source venv/bin/activate",  // Use same venv as backend
        "python frontend/run.py"
      ]
    },
    "aiInstructions": {
      "purpose": "Handle all frontend implementation details using Panel",
      "userInteraction": "Create an interactive chat interface for the Swarm agents",
      "responsibility": "Manage UI components and user interactions",
      "prerequisites": "Ensure Python 3.10+ is installed"
    },
    "dependencies": {
      "python": {
        "panel": "^1.3.0",
        "param": "^2.0.0",
        "bokeh": "^3.0.0",
        "pytest-asyncio": "^0.24.0",
        "pytest-cov": "^5.0.0",
        "markdown": "latest",
        "jinja2": "latest"
        // Removed duplicated dependencies that are already in backend
      }
    },
    "fileStructure": {
      "frontend": {
        "components": {
          "chat": {
            "ChatInterface.py": "Main chat interface component",
            "ChatMessage.py": "Individual message component",
            "ChatInput.py": "Message input component",
            "__init__.py": "Package initialization"
          },
          "utils": {
            "message_processor.py": "Message processing utilities",
            "context_manager.py": "Context variables management",
            "agent_handler.py": "Agent interaction management",
            "__init__.py": "Package initialization"
          }
        },
        "tests": {
          "integration": {
            "test_ui_integration.py": "Integration tests",
            "__init__.py": "Package initialization"
          },
          "utils": {
            "mock_swarm.py": "Mock Swarm client for testing",
            "test_setup.py": "Test directory structure setup",
            "__init__.py": "Package initialization"
          },
          "test_chat_interface.py": "Chat interface tests",
          "test_message_processor.py": "Message processor tests",
          "conftest.py": "Pytest configuration",
          "__init__.py": "Package initialization"
        },
        "styles": {
          "theme.py": "UI theme and styling configurations",
          "custom.css": "Custom styling overrides"
        },
        "integrations": {
          "support_bot": {
            "panel_interface.py": "Panel integration with support_bot",
            "agent_wrapper.py": "Wrapper for Swarm agents",
            "__init__.py": "Package initialization"
          }
        },
        "run.py": "Application entry point",
        "swarm_panel.py": "Main Panel application",
        "__init__.py": "Package initialization"
      }
    },
    "uiComponents": {
      "chatInterface": {
        "features": [
          "Message input area",
          "Send button",
          "Message history display",
          "Agent avatar display",
          "System message support",
          "Error handling display",
          "Loading states",
          "Typing indicators"
        ],
        "styling": {
          "design": "material",
          "customization": "CSS variables support"
        }
      }
    },
    "testingStrategy": {
      "unitTests": {
        "framework": "pytest",
        "command": "pytest frontend/tests/ --cov=frontend",
        "coverage": "pytest --cov=frontend tests/"
      },
      "linting": {
        "tools": ["flake8", "black"],
        "commands": ["flake8 frontend/", "black frontend/"]
      },
      "integrationTests": {
        "description": "Test the interaction between UI components and Swarm agents",
        "command": "pytest frontend/tests/integration/"
      }
    },
    "developmentTools": {
      "devServer": {
        "port": 5006,
        "host": "localhost",
        "options": {
          "autoreload": true,
          "show": true,
          "websocket-origin": "*"
        }
      }
    },
    "integrationNotes": {
      "virtualEnvironment": "Uses the same virtual environment as backend (./venv)",
      "sharedDependencies": [
        "openai",
        "qdrant-client",
        "pytest",
        "black",
        "flake8"
      ],
      "environmentVariables": "Shares .env file with backend"
    }
}
